# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Student {
  _id: ID!
  nik: String!
  fullName: String!
  profilePhoto: String!
  school: String!
  class: String!
  birthDate: DateTime!
  countryCode: String!
  phone: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type WhatsappTemplateMessageComponent {
  type: String!
  text: String!
  url: String
  example: [String!]
}

type WhatsappTemplateMessageBody {
  """must be number with type of string"""
  key: String!

  """must be in snake case, max length 16"""
  value: String!
}

type WhatsappTemplateMessageParameter {
  body: [WhatsappTemplateMessageBody!]!
}

type StudentAttendance {
  student: Student!
  checkIn: DateTime!
  checkOut: DateTime
}

type StudentCheckInObject {
  studentAttendance: StudentAttendance
  message: String!
}

type StudentAttendancesList {
  studentAttendances: [StudentAttendance!]!
  count: Float!
}

type StudentsList {
  students: [Student!]!
  count: Float!
}

type User {
  _id: ID!
  username: String!
  role: String!
  password: String!
}

type UsersList {
  users: [User!]!
  count: Float!
}

type Query {
  student(studentId: ObjectId!): Student!
  studentsList(query: GetStudentsArgs): StudentsList!
  studentAttendance(studentAttendanceId: ObjectId!): StudentAttendance!
  studentAttendancesList(query: GetStudentAttendancesArgs, populate: [PopulateInput!] = [], lean: Boolean = false): StudentAttendancesList!
  users(query: GetUsersArgs!): [User!]!
  user(userId: ObjectId!): User!
  usersList(query: GetUsersArgs!): UsersList!
}

"""Mongo object id scalar type"""
scalar ObjectId

input GetStudentsArgs {
  nik: String
  fullName: String
  profilePhoto: String
  school: String
  class: String
  birthDate: DateTime
  countryCode: String
  phone: String
}

input GetStudentAttendancesArgs {
  student: ObjectId
  dateRange: DateRangeArgs
}

input DateRangeArgs {
  start: DateTime
  end: DateTime
}

input PopulateInput {
  path: String!
  populate: [PopulateInput!]
  options: QueryOptionInput
}

input QueryOptionInput {
  lean: Boolean
}

input GetUsersArgs {
  _id: String
}

type Mutation {
  studentCreate(data: CreateStudentInput!): Student!
  studentCreateMany(data: [CreateStudentInput!]!): Student!
  studentUpdate(studentId: ObjectId!, data: UpdateStudentInput!): Student!
  studentDelete(studentId: ObjectId!): Student!
  studentAttendanceCreate(data: CreateStudentAttendanceInput!): StudentCheckInObject!
  studentAttendanceUpdate(studentAttendanceId: ObjectId!, data: UpdateStudentAttendanceInput!): StudentAttendance!
  studentAttendanceDelete(studentAttendanceId: ObjectId!): StudentAttendance!
  userCreate(data: CreateUserInput!): User!
  userUpdate(userId: ObjectId!, data: UpdateUserInput!): User!
  userDelete(userId: ObjectId!): User!
}

input CreateStudentInput {
  nik: String!
  fullName: String!
  profilePhoto: String!
  school: String!
  class: String!
  birthDate: DateTime!
  countryCode: String!
  phone: String!
}

input UpdateStudentInput {
  nik: String
  fullName: String
  profilePhoto: String
  school: String
  class: String
  birthDate: DateTime
  countryCode: String
  phone: String
}

input CreateStudentAttendanceInput {
  student: ObjectId!
  checkIn: DateTime!
}

input UpdateStudentAttendanceInput {
  student: ObjectId
  checkIn: DateTime
}

input CreateUserInput {
  _id: ID!
}

input UpdateUserInput {
  _id: ID
}