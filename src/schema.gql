# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Student {
  _id: ID!
  nik: String!
  fullName: String!
  profilePhoto: String!
  school: String!
  class: String!
  birthDate: DateTime!
  countryCode: String!
  phone: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type WhatsappTemplateMessageComponent {
  type: String!
  text: String!
  url: String
  example: [String!]
}

type WhatsappTemplateMessageBody {
  """must be number with type of string"""
  key: String!

  """must be in snake case, max length 16"""
  value: String!
}

type WhatsappTemplateMessageParameter {
  body: [WhatsappTemplateMessageBody!]!
}

type StudentAttendance {
  student: Student!
  checkIn: DateTime!
  checkOut: DateTime
}

type StudentAttendanceUpdateObject {
  studentAttendance: StudentAttendance
  message: String!
}

type StudentAttendancesList {
  studentAttendances: [StudentAttendance!]!
  count: Float!
}

type StudentsList {
  students: [Student!]!
  count: Float!
}

type User {
  _id: ID!
  username: String!
  email: String!
  role: UserRoleEnum!
}

enum UserRoleEnum {
  """SuperAdmin"""
  SuperAdmin

  """Admin"""
  Admin

  """Teacher"""
  Teacher
}

type UsersList {
  users: [User!]!
  count: Float!
}

type ValidatedUser {
  accessToken: String!
  _id: ObjectId!
  username: String!
  email: String!
  role: String!
}

"""Mongo object id scalar type"""
scalar ObjectId

type School {
  _id: ObjectId!
  name: String!
  logoPhoto: String!
  address: String!

  """Area code ex: Jakarta is 21"""
  areaCode: String!

  """phone without area code"""
  phone: String!
}

type SchoolsList {
  schools: [School!]!
  count: Float!
}

type Classroom {
  _id: ObjectId!
  school: School!
  grade: ClassroomGradeEnum!
  name: String!
}

enum ClassroomGradeEnum {
  """Nine"""
  Nine

  """Eight"""
  Eight

  """Seven"""
  Seven
}

type ClassroomsList {
  classrooms: [Classroom!]!
  count: Float!
}

type Query {
  """Get profile and refresh token"""
  profile: ValidatedUser!
  users(query: GetUsersArgs!): [User!]!
  user(userId: ObjectId!): User!
  usersList(query: GetUsersArgs): UsersList!
  classrooms(query: GetClassroomsArgs!): [Classroom!]!
  classroom(classroomId: ObjectId!): Classroom!
  classroomsList(query: GetClassroomsArgs, populate: [PopulateInput!] = [], lean: Boolean = false): ClassroomsList!
  student(studentId: ObjectId!): Student!
  studentsList(query: GetStudentsArgs): StudentsList!
  studentAttendance(studentAttendanceId: ObjectId!): StudentAttendance!
  studentAttendancesList(query: GetStudentAttendancesArgs, populate: [PopulateInput!] = [], lean: Boolean = false): StudentAttendancesList!
  schools(query: GetSchoolsArgs!): [School!]!
  school(schoolId: ObjectId!): School!
  schoolsList(query: GetSchoolsArgs, populate: [PopulateInput!] = [], lean: Boolean = false): SchoolsList!
}

input GetUsersArgs {
  "\n    implements pagination, <page> default value is 1\n    works with field <limit> to skip (<page>*<limit>) docs.\n  "
  page: Int

  "\n    implements pagination, <limit> default value is 10\n    works with field <page> to skip (<page>*<limit>) docs.\n  "
  limit: Int

  "\n    Can sort multiple <key>\n    format: <key>:<sort>|<key2>:<sort>|<nextKey>:<sort>\n    <sort> is either : 1 (ascending) or -1 (descending)\n    | is used as separator between key\n    example: createdAt:-1|title:1\n  "
  sort: String
  searchOptions: SearchOptionsInput
  email: String
  username: String
  role: [UserRoleEnum!]
  password: String
}

input SearchOptionsInput {
  searchText: String!
  searchInFields: [String!]!
}

input GetClassroomsArgs {
  "\n    implements pagination, <page> default value is 1\n    works with field <limit> to skip (<page>*<limit>) docs.\n  "
  page: Int

  "\n    implements pagination, <limit> default value is 10\n    works with field <page> to skip (<page>*<limit>) docs.\n  "
  limit: Int

  "\n    Can sort multiple <key>\n    format: <key>:<sort>|<key2>:<sort>|<nextKey>:<sort>\n    <sort> is either : 1 (ascending) or -1 (descending)\n    | is used as separator between key\n    example: createdAt:-1|title:1\n  "
  sort: String
  searchOptions: SearchOptionsInput
  school: ObjectId
  grade: ClassroomGradeEnum
  name: String
}

input PopulateInput {
  path: String!
  populate: [PopulateInput!]
  options: QueryOptionInput
}

input QueryOptionInput {
  lean: Boolean
}

input GetStudentsArgs {
  "\n    implements pagination, <page> default value is 1\n    works with field <limit> to skip (<page>*<limit>) docs.\n  "
  page: Int

  "\n    implements pagination, <limit> default value is 10\n    works with field <page> to skip (<page>*<limit>) docs.\n  "
  limit: Int

  "\n    Can sort multiple <key>\n    format: <key>:<sort>|<key2>:<sort>|<nextKey>:<sort>\n    <sort> is either : 1 (ascending) or -1 (descending)\n    | is used as separator between key\n    example: createdAt:-1|title:1\n  "
  sort: String
  searchOptions: SearchOptionsInput
  nik: String
  fullName: String
  profilePhoto: String
  school: String
  class: String
  birthDate: DateTime
  countryCode: String
  phone: String
}

input GetStudentAttendancesArgs {
  "\n    implements pagination, <page> default value is 1\n    works with field <limit> to skip (<page>*<limit>) docs.\n  "
  page: Int

  "\n    implements pagination, <limit> default value is 10\n    works with field <page> to skip (<page>*<limit>) docs.\n  "
  limit: Int

  "\n    Can sort multiple <key>\n    format: <key>:<sort>|<key2>:<sort>|<nextKey>:<sort>\n    <sort> is either : 1 (ascending) or -1 (descending)\n    | is used as separator between key\n    example: createdAt:-1|title:1\n  "
  sort: String
  searchOptions: SearchOptionsInput
  student: ObjectId
  dateRange: DateRangeArgs
}

input DateRangeArgs {
  start: DateTime
  end: DateTime
}

input GetSchoolsArgs {
  "\n    implements pagination, <page> default value is 1\n    works with field <limit> to skip (<page>*<limit>) docs.\n  "
  page: Int

  "\n    implements pagination, <limit> default value is 10\n    works with field <page> to skip (<page>*<limit>) docs.\n  "
  limit: Int

  "\n    Can sort multiple <key>\n    format: <key>:<sort>|<key2>:<sort>|<nextKey>:<sort>\n    <sort> is either : 1 (ascending) or -1 (descending)\n    | is used as separator between key\n    example: createdAt:-1|title:1\n  "
  sort: String
  searchOptions: SearchOptionsInput
  name: String
  logoPhoto: String
  address: String

  """Area code ex: Jakarta is 21"""
  areaCode: String

  """phone without area code"""
  phone: String
}

type Mutation {
  login(email: String!, password: String!): ValidatedUser!

  """refresh token and save device data"""
  profileRefresh: ValidatedUser!
  userCreate(data: CreateUserInput!): User!
  userUpdate(userId: ObjectId!, data: UpdateUserInput!): User!
  userDelete(userId: ObjectId!): User!
  classroomCreate(data: CreateClassroomInput!): Classroom!
  classroomUpdate(classroomId: ObjectId!, data: UpdateClassroomInput!): Classroom!
  classroomDelete(classroomId: ObjectId!): Classroom!
  studentCreate(data: CreateStudentInput!): Student!
  studentCreateMany(data: [CreateStudentInput!]!): Student!
  studentUpdate(studentId: ObjectId!, data: UpdateStudentInput!): Student!
  studentDelete(studentId: ObjectId!): Student!
  studentAttendanceCreate(data: CreateStudentAttendanceInput!): StudentAttendanceUpdateObject!
  studentAttendanceUpdate(studentAttendanceId: ObjectId!, data: UpdateStudentAttendanceInput!): StudentAttendance!
  studentAttendanceCheckout(studentId: ObjectId!): StudentAttendanceUpdateObject!
  studentAttendanceDelete(studentAttendanceId: ObjectId!): StudentAttendance!
  schoolCreate(data: CreateSchoolInput!): School!
  schoolUpdate(schoolId: ObjectId!, data: UpdateSchoolInput!): School!
  schoolDelete(schoolId: ObjectId!): School!
}

input CreateUserInput {
  email: String!
  username: String!
  role: UserRoleEnum!
  password: String!
}

input UpdateUserInput {
  email: String
  username: String
  role: UserRoleEnum
  password: String
}

input CreateClassroomInput {
  school: ObjectId!
  grade: ClassroomGradeEnum!
  name: String!
}

input UpdateClassroomInput {
  school: ObjectId
  grade: ClassroomGradeEnum
  name: String
}

input CreateStudentInput {
  nik: String!
  fullName: String!
  profilePhoto: String!
  school: String!
  class: String!
  birthDate: DateTime!
  countryCode: String!
  phone: String!
}

input UpdateStudentInput {
  nik: String
  fullName: String
  profilePhoto: String
  school: String
  class: String
  birthDate: DateTime
  countryCode: String
  phone: String
}

input CreateStudentAttendanceInput {
  student: ObjectId!
  checkIn: DateTime!
}

input UpdateStudentAttendanceInput {
  checkIn: DateTime!
}

input CreateSchoolInput {
  name: String!
  logoPhoto: String!
  address: String!

  """Area code ex: Jakarta is 21"""
  areaCode: String!

  """phone without area code"""
  phone: String!
}

input UpdateSchoolInput {
  name: String
  logoPhoto: String
  address: String

  """Area code ex: Jakarta is 21"""
  areaCode: String

  """phone without area code"""
  phone: String
}